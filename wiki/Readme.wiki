=== Introduction ====

Brutis is a tool designed to exercise memcache instances by providing reproducible performance data for comparison purposes. Brutis can be useful for sizing memcache clusters as well as testing changes to the system, the hardware, and/or the environment. Much like a dynamometer, the numbers Brutis produces are not as important as the differences in the numbers between changes to the system, the hardware, and/or the environment. 

When sizing memcached clusters, Brutis can help by stressing a memcached cluster to see:
  * How many ops the cluster is capable of
  * How much load the network config can take
  * How many connections a memcache cluster is capable of handling (weâ€™ve tested up to 40K connections)

With respect to instance (not cluster) sizing, Brutis can be used to simulate varying object and key sizes to see how many keys/objects can fit in a memcache instance before evictions start.

=== How It Works ===

Brutis is made up of three components: The main executable, the client, and the collector.

The main executable serves as a wrapper for the client and collector. It handles forking and process control. The client is the actual memcache client program. The collector aggregates the stats from one or many client processes and outputs results to the screen or to a file.

For greater control, you can run the collector and the client as standalone programs.

Brutis exercises and measures the performance of one or more memcache instances by:

  #. Generating pseudo random data and md5 checksum
  #. Executing set operations with objects that encapsulates data and md5 checksum
  #. Executing get operations from the memcache servers
  #. Verifying data and md5 checksum match
  #. Reporting the results to a collector

=== Required Libraries ===
        * pear/Net_Socket >= 1.0.8 - http://pear.php.net/package/Net_Socket
        * pear/Net_Server >= 1.0.2 - http://pear.php.net/package/Net_Server
        * pecl/memcache   >= 2.2.4 - http://pecl.php.net/package/memcache



===Known Issues===
 * duplicate memcache servers in the -x option fail to reconnect on disconnect or failure.
 * Batch gets can cause misses if rand() picks the same key multiple times


=== Files ===
{{{
./license License info 
./readme This file
./brutis Main executable.
.lib/client Memcache client
./lib/collector Statistic collector
./lib/functions.php Common functions 
./lib/taskmanager.php Taskmanager class
}}}
=== Usage ===
{{{	
brutis [OPTIONS] -x [server,..]
}}}

=== Options ===
	
Options may be given in any order.

{{{
-k {Max Keys}
	Maximum key id to iterate up to. Keys are a concatenation of $prefix and $key_id. Default is '1000000'.

-z {Key offset}
	Where key_id starts to iterate. Default is '0'.

-a {Set Pattern:Get Pattern}
	Valid patterns are S for sequential and R for Random. Default is 'S:R'.

-p {Key Prefix}
	Data to use for key prefix. Keys are a concatenation of $prefix and $key_id. Default is 'brutis-'.

-i {Poll interval}
	Interval in seconds to send data to collector and write out to output file.

-b {Batch}
	Number of key's to batch into 1 get operation.
			
-c {Collector:Port}
	Host to connect or start collector on. Default is localhost's DNS name '<hostname>:9091'.

-d
	Disable MD5 checksum.

-r {Set Ratio:Get Ratio}
	Ratio of sets to gets. Default '1:10'.

-n {Operations}
	Number of operations to perform before exiting.

-t {Time}
	Time to run operations in seconds before exiting. Default '172800'.

-f {Forks}
	Number of clients to fork. Default '1'.

-s {Size}
	Size of object to generate for sets in bytes. Default 256.

-x {Server:tcp_port:udp_port,...}
	List of memcache servers to use. UDP port should be 0 unless trying to enable UDP support. UDP support is only available with danga memcache library 3.x 

-o {Output Filename}
	Filename to output raw stats to. Causes collector to be invoked.

-v
	Enable Verbose output. Causes the collector to be invoked.

-h
	Display help.
}}}


=== Exit Codes ===
{{{
Exit Code 0:	Success	
Exit Code 1:	Error
Exit Code 4:	Warning - Either Set failures or md5 checksum mismatch
}}}

=== Collector Output ===
{{{
36891.91 Sets/sec, 0 Gets/Sec, 0 Hits/sec, 0 Misses/sec, 0 Fails/sec, 36891.91 Ops/sec 9.01 MB/sec, 20 Clients
}}}
     * Sets and Gets are memcache operations
     * Hits, Misses, and fails are key transations

=== File Output ===
File output is in colon delimited format. A new line is added at every poll interval set at the command line. default is 2 seconds.

{{{
t2 - t1 = elapsed_time
gets/elapsed_time = gets_per_sec
}}}

To calculate say gets per second from the below format. You need to subtract the 2nd line's timestamps from the 1st line's timestamp. This will give you the elapsed time in seconds. Divide the value from the "gets" column by the elapsed time and you have gets per second.

{{{
#timestamp:sets:gets:hits:misses:set_fails:md5_fails:operations:transferred:size:clients
1239269597.5658:70120:0:0:0:0:0:70120:17950720:mixed:20
1239269605.5669:73269:0:0:0:0:0:73269:18756864:mixed:20
}}}


=== Examples Usage ===
{{{
Single client node, 20 forks, random Set test, single collector	
	cn-1: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 1:0 -v

Single client node, 20 forks, random Get test, single collector
	cn-1: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 0:1 -v

Single client node, 20 fork, random 1:10 get:set ratio, single collector
	cn-1: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 1:10 -v

Multi client node, 20 forks, random Set test, single collector
	cn-1: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 1:0 -v -c cn-1
	cn-2: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 1:0 -v -c cn-1
	cn-3: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 1:0 -v -c cn-1
	cn-4: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 1:0 -v -c cn-1

Multi client node, 20 forks, random Get test, 1 collecter per client node.
	cn-1: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 0:1 -v 	
	cn-2: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 0:1 -v
	cn-3: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 0:1 -v
	cn-4: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 0:1 -v

Multi client node, 20 forks, random 1:10 set:get ratio, single collector
	cn-1: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 1:10 -v -c cn-1
	cn-2: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 1:10 -v -c cn-1
	cn-3: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 1:10 -v -c cn-1
	cn-4: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:r -r 1:10 -v -c cn-1

Multi client node, 20 forks, mixed load/size test, single collector
	cn-1: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:s -r 1:100 -v -s 250 -c cn-1
	cn-2: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a s:r -r 1:10 -v -s 512 -c cn-1
	cn-3: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a s:r -r 1:50 -v -s 128 -c cn-1
	cn-4: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4 -a r:s -r 1:1 -v -s 64 -c cn-1

Multi client node, 20 forks, High connection count, single collector
	cn-1: ./brutis -i 20 -x mc-1,mc-2,mc-3,mc-4,mc-1,mc-2,mc-3,mc-4 -a r:r -r 1:10 -v -c cn-1
	cn-2: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4,mc-1,mc-2,mc-3,mc-4 -a r:r -r 1:10 -v -c cn-1
	cn-3: ./brutis -f 20 -x mc-1,mc-2,mc-3,mc-4,mc-1,mc-2,mc-3,mc-4 -a r:r -r 1:10 -v -c cn-1
	cn-4: ./brutis -f 20 -x mc-1,mc-2,mc-3,m
}}}

=== Release Notes ===

Version - 0.89
                * Rename to Brutis
                * Do not allow batch gets greater then max keys.
Version - 0.88
                * Added experimental support for danga version 3.x library and UDP.
Version - 0.86
                * Fixed bug with multiple of the same argument
                * added sigint handler to collector so it cleans up before exit on ctrl-c
                * Fixed total operations accounting in collector to be correct
                * Defined Exit codes
                * Fixed incorrect exitcode of 1024 from client
                * Removed collector limitation of running on all ip/ports
Version - 0.85
                * Added host validation
                * Many cleanups
Version - 0.83
                * Fixed MD5 not being added to transferred total
                * recognize localhost as well as hostname to know when to start collector
                * Removed offset from set_interval
                * Cleaned up taskmanager formating
Version - 0.82
                * Added batch gets
                * Added Polling interval
                * Changed Gets to hits and added ops to collector for batch gets accounting
                * Removed 33 byte limitation with warning and disable of checksum
                * Added Readme file
Version - 0.81
                * Exit code 4 on only set failure or md5 checksum mismatch
Version - 0.80
                * Exit code 4 on set failure, md5 checksum mismatch, and misses
                * Introduced Access Patterns for set and get operations
                * Fixed bug to correctly display MB/Sec transferred with mixed object sizes
Version - pre 0.80
                * Undocumented